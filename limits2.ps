
/UseStringKey false def
/NumEntriesPerDict 11000000 def
/NumDicts 15 def



/iNumDefsTotal 0 def

%% /concatstrings derived from https://stackoverflow.com/questions/12378904/postscript-concatenate-two-strings
/concatstrings % (a) (b) -> (ab)  
{
    count 2 lt{
        (% Error: /concatstrings: needs two args) =
        $error /errorname /stackunderflow put
        stop
    }if

    0 index type /stringtype ne{
        (% Error: /concatstrings: first arg not string) =
        $error /errorname /typecheck put
        stop
    }if

    1 index type /stringtype ne{
        (% Error: /concatstrings: second arg not string) =
        $error /errorname /typecheck put
        stop
    }if

    % body
    exch dup length    
    2 index length add string    
    dup dup 4 2 roll copy length
    4 -1 roll putinterval
} bind def


/dictCounter 0 def

%100 dict begin

% Number of dicts
1 1 NumDicts{
    () =
    /ndict exch def
    
    (Timestamp:) usertime 1000 div cvi 16 string cvs concatstrings =
   /DictName ndict 10 string cvs def

   DictName cvn 10 dict def

    (Writing into dict:) currentdict /DictName get 10 string cvs concatstrings =
    
    % Number of entries per dict
    1 1 NumEntriesPerDict{
        /j exch store
        j 100000 mod 0 eq{
            j  =
            flush
        }if
        
        {
            currentdict DictName get
            UseStringKey{
                j 16 string cvs cvn
            }{
                j
            }ifelse
            (foo bar mmm)  put
            
            /iNumDefsTotal iNumDefsTotal 1 add store
        }stopped{
            (ERROR: STOPPED) =
            (********************) =
            (ERROR is: ) $error /errorname get 64 string cvs concatstrings =
            (********************) =
            (Key number=) j 16 string cvs concatstrings =

            20 dict begin
            /dictCounter dictCounter 1 add store
            currentdict DictName get
             j 16 string cvs cvn
             (foo bar mmm)  put
            (OK) =
            end
            QUIT
        }if
    }for
    /dictCounter dictCounter 1 add store
    () =
    flush
}for

 (------Dictionaries----------) =
1 1 NumDicts{
    /ndict exch def
    /DictName ndict 10 string cvs def
    
    (Dictionary: ) DictName concatstrings
    (  Length: ) concatstrings
    currentdict DictName get length 10 string cvs concatstrings =
}for

%end

